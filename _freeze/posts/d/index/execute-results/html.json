{
  "hash": "5d598853a100903ac1fc4d8013eef8e6",
  "result": {
    "markdown": "---\ntitle: \"Bussines analytics\"\ndate: 03-2-2023 \nauthor: Sreekanya Peddireddi\ncategories: [data analysis]\nimage: \"b.jpg\"\n---\n\n\nIn this group project, you will work with analysts' forecast data of earning per share (EPS) provided by Wharton Research Data Services (WRDS). Institutional Brokers' Estimate System (I/B/E/S) provides historical data on certain financial indicators collected from thousands of individual analysts working in more than 3,000 broker houses.\n\n-   **TICKER:** A unique identifier assigned to each security. In this group project, you will only model \"NFLX\" ticker.\n\n-   **CNAME:** Company name\n\n-   **ACTDATS:** The Activation date: It is the date when the analyst forecast became effective within the IBES database.\n\n-   **ESTIMATOR:** Sellside institution (mostly broker house). It is just the broker.\n\n-   **ANALYS:** The person who makes the forecast and work for sellside institution. Estimators and analysts are represented by codes to hide their real names.\n\n-   **FPI:** Forecast Period Indicator: The forecasting period. 6: Next Fiscal Quarter 1: Next Fiscal Year\n\n-   **MEASURE**: The variable being estimated. We have data for earning per share (EPS)\n\n-   **VALUE:** The forecasted value of EPS\n\n-   **FPEDATS**: The Forecast Period End Date: It is the ending date of the fiscal period to which the estimate applies. For the majority of companies, the FPEDATS date is December 31st of that year.\n\n-   **REVDATS:** The Review Date: It is the most recent date on which IBES called the analyst and verified that particular estimate as still valid for that analyst. If an analyst confirms that a previous estimate is still valid, the original database record for that estimate is retained and only the REVDATS variable is updated. If an analyst changes their estimate for a given company, a new record is entered in the database with a new ANNDATS. The old record of the analyst (containing the previous estimate) is retained in the database.\n\n-   **REVTIMS**: Time-stamp of REVDATS\n\n-   **ANNDATS**: The Announce date: It is the date on which the analyst first made that particular estimate.\n\n-   **ANNTIMS**: Time-stamp of ANNDATS\n\n-   **ACTUAL**: The realized EPS, the true EPS value.\n\n-   **ANNDATS_ACT**: The Announced date of Actual EPS: The actual EPS value is announced by the company at this date.\n\n-   **ANNTIMS_ACT**: The time-stamp of ANNDATS_ACT\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nNFLX <- read.csv(\"C:/Users/HP/Downloads/NFLX.csv\", header=TRUE)\nnames(NFLX)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"TICKER\"      \"CNAME\"       \"ACTDATS\"     \"ESTIMATOR\"   \"ANALYS\"     \n [6] \"FPI\"         \"MEASURE\"     \"VALUE\"       \"FPEDATS\"     \"REVDATS\"    \n[11] \"REVTIMS\"     \"ANNDATS\"     \"ANNTIMS\"     \"ACTUAL\"      \"ANNDATS_ACT\"\n[16] \"ANNTIMS_ACT\"\n```\n:::\n:::\n\n\n## How to read the data\n\n**The first row in NFLX data set**: On 09‐Aug-2002 (ANNDATS), analyst 6749 (ANALYS) at Estimator 1872 (ESTIMATOR) predicts that the EPS (MEASURE) for NETFLIX INC. (CNAME) with a ticker of NFLX (TICKER) with forecast period ending 30‐Sep-2002 (FPEDATS) is -\\$0.0086 (VALUE). This estimates was entered into the database on 12‐Aug-2002 (ACTDATS). On 17-Oct-2002 (ANNDATS_ACT), NETFLIX INC. announced an actual EPS of \\$7e-04 (\\$0.0007) (ACTUAL) for this quarter (FPI=6).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(NFLX,n=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  TICKER        CNAME  ACTDATS ESTIMATOR ANALYS FPI MEASURE   VALUE  FPEDATS\n1   NFLX NETFLIX INC. 20020812      1872   6749   6     EPS -0.0086 20020930\n   REVDATS  REVTIMS  ANNDATS  ANNTIMS ACTUAL ANNDATS_ACT ANNTIMS_ACT\n1 20021018 17:02:56 20020809 14:00:00 -7e-04    20021017    17:04:00\n```\n:::\n:::\n\n\n## Your Turn:\n\n::: {.callout-important appearance=\"simple\"}\n## Task 1A: Calculate Missingness\n\nCheck to see the missing values in NFLX dataset and calculate the percent missing for each variable in `NFLX` and list your findings in R object called `NFLX_missingness`. `NFLX_missingness` is a dataframe with two columns: The first column, `Variable`, stores the variable names and the second column, `Missingness` shows the percent missing in percentage points with two decimal points.\n:::\n\n## Your code for Task 1A\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(corrplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ncorrplot 0.92 loaded\n```\n:::\n\n```{.r .cell-code}\nlibrary(kableExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'kableExtra'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n```\n:::\n\n```{.r .cell-code}\n# Read CSV data\nNFLX <- read.csv(\"C:/Users/HP/Downloads/NFLX.csv\", header=TRUE)\n\n# Calculate missing values percentage function\ncalculate_missingness <- function(data) {\n  data %>%\n    summarise_all(~mean(is.na(.)) * 100)\n}\n\n# Calculate missing values\nNFLX_missingness <- calculate_missingness(NFLX)\n\n# Print missing values summary\nprint(NFLX_missingness)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  TICKER CNAME ACTDATS ESTIMATOR ANALYS FPI MEASURE VALUE FPEDATS REVDATS\n1      0     0       0         0      0   0       0     0       0       0\n  REVTIMS ANNDATS ANNTIMS   ACTUAL ANNDATS_ACT ANNTIMS_ACT\n1       0       0       0 4.115304    4.115304           0\n```\n:::\n\n```{.r .cell-code}\n# Visualize missing values\nmissingness_plot <- function(data) {\n  data_long <- gather(data, key = \"Variable\", value = \"MissingPercentage\")\n  ggplot(data_long, aes(x = reorder(Variable, -MissingPercentage), y = MissingPercentage)) +\n    geom_bar(stat = \"identity\", fill = \"skyblue\") +\n    labs(title = \"Missing Values Percentage by Variable\", \n         x = \"Variable\", y = \"Missing Percentage\") +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n}\n\n# Generate and display missing values plot\nmissingness_plot(NFLX_missingness)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-important appearance=\"simple\"}\n## Task 1B: Data Manipulation\n\nConduct the following data manipulations on `NFLX`:\n\n-   Drop rows from the data set when a variable has a missing value\n\n-   Drop rows from the data set the quarterly forecasts (drop FPI=6)\n\n-   Declare TICKER, CNAME, ESTIMATOR , ANALYS, FPI , and MEASURE variables as factor\n\n-   Declare ACTDATS, FPEDATS , ANNDATS, REVDATS, ANNDATS_ACT as time variable.\n\n-   Drop ANNTIMS_ACT, ANNTIMS , and REVTIMS\n\n-   Create a new column named YEAR that captures the year in FPEDATS\n\n-   Name your reduced dataset as `NFLX1`\n\n-   Print out data structure and the summary of NFLX1\n:::\n\n## Your code for Task 1B\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Copy NFLX to NFLX1 without assigning data types\nNFLX1 <- NFLX\n\n# Drop rows from the data set when a variable has a missing value\nNFLX1 <- NFLX1 %>% na.omit()\n\n# Drop rows from the data set where FPI=6\nNFLX1 <- NFLX1 %>% filter(FPI != 6)\n\n# Drop ANNTIMS_ACT, ANNTIMS, and REVTIMS\nNFLX1 <- NFLX1 %>% select(-ANNTIMS_ACT, -ANNTIMS, -REVTIMS)\n\n# Create a new column named YEAR that is an exact copy of the data in FPEDATS\nNFLX1 <- NFLX1 %>% mutate(YEAR = FPEDATS)\n\n# Print out data structure and the summary of NFLX1\nstr(NFLX1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t2603 obs. of  14 variables:\n $ TICKER     : chr  \"NFLX\" \"NFLX\" \"NFLX\" \"NFLX\" ...\n $ CNAME      : chr  \"NETFLIX INC.\" \"NETFLIX INC.\" \"NETFLIX INC.\" \"NETFLIX INC.\" ...\n $ ACTDATS    : int  20020805 20021202 20021202 20021202 20021205 20030106 20030115 20030116 20030121 20030314 ...\n $ ESTIMATOR  : int  183 2178 1872 220 2178 1872 2227 220 1872 481 ...\n $ ANALYS     : int  79868 80485 6749 57596 80485 6749 82629 57596 6749 81599 ...\n $ FPI        : int  1 1 1 1 1 1 1 1 1 1 ...\n $ MEASURE    : chr  \"EPS\" \"EPS\" \"EPS\" \"EPS\" ...\n $ VALUE      : num  -0.025 -0.0321 -0.0207 -0.0179 -0.0286 -0.0136 -0.0164 -0.0071 0.0107 0.0129 ...\n $ FPEDATS    : int  20021231 20021231 20021231 20021231 20021231 20021231 20021231 20031231 20031231 20031231 ...\n $ REVDATS    : int  20021129 20021202 20021202 20021206 20021205 20030114 20030115 20030417 20030402 20030409 ...\n $ ANNDATS    : int  20020805 20021202 20021202 20021202 20021204 20030102 20030115 20030116 20030116 20030314 ...\n $ ACTUAL     : num  -0.005 -0.005 -0.005 -0.005 -0.005 -0.005 -0.005 0.0393 0.0393 0.0393 ...\n $ ANNDATS_ACT: int  20030115 20030115 20030115 20030115 20030115 20030115 20030115 20040121 20040121 20040121 ...\n $ YEAR       : int  20021231 20021231 20021231 20021231 20021231 20021231 20021231 20031231 20031231 20031231 ...\n - attr(*, \"na.action\")= 'omit' Named int [1:217] 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 ...\n  ..- attr(*, \"names\")= chr [1:217] \"5057\" \"5058\" \"5059\" \"5060\" ...\n```\n:::\n\n```{.r .cell-code}\nsummary(NFLX1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    TICKER             CNAME              ACTDATS           ESTIMATOR   \n Length:2603        Length:2603        Min.   :20020805   Min.   :  11  \n Class :character   Class :character   1st Qu.:20101021   1st Qu.: 192  \n Mode  :character   Mode  :character   Median :20141009   Median : 899  \n                                       Mean   :20136831   Mean   :1376  \n                                       3rd Qu.:20180122   3rd Qu.:2502  \n                                       Max.   :20210119   Max.   :4439  \n     ANALYS            FPI      MEASURE              VALUE       \n Min.   :  1047   Min.   :1   Length:2603        Min.   :-0.150  \n 1st Qu.: 71755   1st Qu.:1   Class :character   1st Qu.: 0.190  \n Median : 82010   Median :1   Mode  :character   Median : 0.430  \n Mean   : 89534   Mean   :1                      Mean   : 1.339  \n 3rd Qu.:114459   3rd Qu.:1                      3rd Qu.: 2.015  \n Max.   :194536   Max.   :1                      Max.   : 7.670  \n    FPEDATS            REVDATS            ANNDATS             ACTUAL      \n Min.   :20021231   Min.   :20021129   Min.   :20020805   Min.   :-0.005  \n 1st Qu.:20101231   1st Qu.:20110120   1st Qu.:20101021   1st Qu.: 0.250  \n Median :20141231   Median :20141013   Median :20141009   Median : 0.430  \n Mean   :20137082   Mean   :20137740   Mean   :20136830   Mean   : 1.384  \n 3rd Qu.:20181231   3rd Qu.:20180122   3rd Qu.:20180122   3rd Qu.: 2.680  \n Max.   :20201231   Max.   :20210119   Max.   :20210119   Max.   : 6.080  \n  ANNDATS_ACT            YEAR         \n Min.   :20030115   Min.   :20021231  \n 1st Qu.:20110126   1st Qu.:20101231  \n Median :20150120   Median :20141231  \n Mean   :20145973   Mean   :20137082  \n 3rd Qu.:20190117   3rd Qu.:20181231  \n Max.   :20210119   Max.   :20201231  \n```\n:::\n:::\n\n\n::: {.callout-important appearance=\"simple\"}\n## Task 2: Calculate Number of Analysts and Brokerage Houses\n\n-   Calculate the total number of **unique** analysts in **NFLX1** dataset that provide forecasts **each year** and name your R object as **NumberAnalyst**\n\n-   Calculate the total number of **unique** brokerage houses (ESTIMATOR) in **NFLX1** dataset that provide forecasts **each year** and name your R object as **NumberBrokerage**\n\n-   **Need Written Response in this callout:** In which year(s) we have the highest number of unique analysts providing forecasts for NFLX ticker? In which year(s), we have the highest number of unique brokerage houses providing forecasts for the NFLX ticker.\n\n::: {.callout-important appearance=\"simple\"}\n**The year 2020**\n:::\n:::\n\n## Your code for Task 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a new column named YEAR that captures the year in FPEDATS in the specified format\nNFLX1 <- NFLX1 %>%\n  mutate(YEAR = format(FPEDATS))\n\n# Calculate the total number of unique analysts providing forecasts each year\nNumberAnalyst <- NFLX1 %>%\n  group_by(YEAR) %>%\n  distinct(ANALYS) %>%\n  summarise(NumAnalysts = n_distinct(ANALYS))\n\n# Print the NumberAnalyst object\nprint(NumberAnalyst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 × 2\n   YEAR     NumAnalysts\n   <chr>          <int>\n 1 20021231           5\n 2 20031231           9\n 3 20041231          19\n 4 20051231          17\n 5 20061231          20\n 6 20071231          20\n 7 20081231          20\n 8 20091231          33\n 9 20101231          37\n10 20111231          40\n11 20121231          38\n12 20131231          42\n13 20141231          45\n14 20151231          47\n15 20161231          46\n16 20171231          48\n17 20181231          56\n18 20191231          46\n19 20201231          49\n```\n:::\n\n```{.r .cell-code}\n# Calculate the total number of unique brokerage houses providing forecasts each year\nNumberBrokerage <- NFLX1 %>%\n  group_by(YEAR) %>%\n  distinct(ESTIMATOR) %>%\n  summarise(NumBrokerage = n_distinct(ESTIMATOR))\n\n# Print the NumberBrokerage object\nprint(NumberBrokerage)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 × 2\n   YEAR     NumBrokerage\n   <chr>           <int>\n 1 20021231            5\n 2 20031231            8\n 3 20041231           18\n 4 20051231           17\n 5 20061231           19\n 6 20071231           18\n 7 20081231           21\n 8 20091231           32\n 9 20101231           38\n10 20111231           35\n11 20121231           36\n12 20131231           43\n13 20141231           40\n14 20151231           46\n15 20161231           45\n16 20171231           49\n17 20181231           54\n18 20191231           43\n19 20201231           44\n```\n:::\n:::\n\n\n::: {.callout-important appearance=\"simple\"}\n## Task 3: Get the most recent forecast in each year\n\n-   It is quite possible that an analyst makes multiple forecasts throughout the year for the same fiscal period. Remove observations from **NFLX1** if an analyst has multiple predictions for the same year and keep the last one (the most recent forecast for each year). Name your new dataset as **NFLX2.** This step is crucial for successful execution of the following tasks. Print the dimension of `NFLX2`.\n\n-   Check your work: If your `NFLX2` dataset has 641 rows and 14 columns, then you are on the right track. If not, please seek help!\n:::\n\n## Your code for Task 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter your code for Task 3 below \n# Get the most recent forecast for each analyst in each year\nNFLX2 <- NFLX1 %>%\n  group_by(ANALYS, YEAR) %>%\n  filter(REVDATS == max(REVDATS)) %>%\n  ungroup()\n\n# Print the dimension of NFLX2\nprint(dim(NFLX2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 641  14\n```\n:::\n\n```{.r .cell-code}\n# Check your work\n# If NFLX2 has 641 rows and 14 columns, you are on the right track.\n# If not, please seek help!\n```\n:::\n\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 4: Calculate past accuracy\n\n-   Create a copy of `NFLX2` and call it `NFLX3`\n\n-   For every year within the dataset `NFLX3`, compute the forecasting performance of each analyst for the current year and store the results in a new column labeled `accuracy`. In the calculation of forecast performance, you can use the VALUE-ACTUAL as the forecast accuracy measure.\n\n-   For each year in the `NFLX3` dataset, compute the forecasting performance of each analyst from the **previous year** and store the results in a new column called `past_accuracy`\n\n-   As an example, consider the year 2006, where analyst 1047, employed at brokerage house 464, provided an estimated end-of-period EPS of 0.0929 (VALUE). However, the actual EPS for that year turned out to be 0.1014 (ACTUAL), resulting in a forecasting error of -0.0085. Consequently, in the subsequent year, 2007, the past_accuracy metric for analyst 1047 would reflect this error by taking the value of -0.0085 (VALUE-ACTUAL).\n\n-   This action will create some missing values and this is perfectly fine.\n\n-   If your code produces 144 NAs, then you are on the right track.\n\n-   Note that we are creating copies of the original dataset at each step to facilitate error detection in case any mistakes occur during the process.\n:::\n\n## Your code for Task 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a copy of NFLX2 and call it NFLX3\nNFLX3 <- NFLX2\n\n# Task 4: Calculate past accuracy\n\n# For every year within the dataset NFLX3, compute the forecasting performance of each analyst for the current year and store the results in a new column labeled accuracy.\nNFLX3 <- NFLX3 %>%\n  group_by(YEAR, ANALYS) %>%\n  mutate(accuracy = VALUE - ACTUAL)\n\n# For each year in the NFLX3 dataset, compute the forecasting performance of each analyst from the previous year and store the results in a new column called past_accuracy\nNFLX3 <- NFLX3 %>%\n  group_by(ANALYS) %>%\n  arrange(YEAR) %>%\n  mutate(past_accuracy = lag(accuracy))\n\n# Check if the code produces 144 NAs\nsum(is.na(NFLX3$past_accuracy))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 144\n```\n:::\n:::\n\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 5: Forecast Horizon\n\n-   The longer the forecast horizon, the higher the uncertainty associated with EPS forecasts. To control for this fact, create a new column in **NFLX3** called **horizon** that captures the forecast horizon (ANNDATS_ACT- ANNDATS) for **each analyst**.\n\n-   We anticipate observing a negative correlation between `accuracy` and `horizon`. Typically, as the forecast horizon increases, the accuracy tends to decrease, and vice versa. However, in our dataset, there is an exception where we find a positive correlation between `accuracy` and `horizon` for one specific year. Write an R code to identify and determine which year exhibits this positive correlation.\n\n-   **Need Written Response in this callout:** Enter the year in here.\n\n::: {.callout-important appearance=\"simple\"}\n***The year with the correlation was 2018 2012 2011 2013 2015 with 2018 having the highest correlation of 0.24300105.***\n:::\n:::\n\n## Your code for Task 5\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter your code for Task 5 below\n# Calculate forecast horizon\nNFLX3 <- NFLX3 %>%\n  mutate(horizon = as.numeric(difftime(ANNDATS_ACT, ANNDATS, units = \"days\")))\n\n# Calculate correlation between accuracy and horizon\ncorrelation_by_year <- NFLX3 %>%\n  group_by(YEAR) %>%\n  summarise(correlation = cor(accuracy, horizon, use = \"complete.obs\"))\n\n# Convert YEAR to POSIXlt format\ncorrelation_by_year$YEAR <- as.POSIXlt(correlation_by_year$YEAR, format = \"%Y\")\ncorrelation_by_year$YEAR <- format(correlation_by_year$YEAR, \"%Y-%m-%d %H:%M:%S\")\n\n# Find positive correlation year\npositive_corr_year <- correlation_by_year %>%\n  filter(correlation > 0)\n\n# Print positive correlation year with correlation values\nprint(positive_corr_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  YEAR                correlation\n  <chr>                     <dbl>\n1 2011-12-07 00:00:00      0.227 \n2 2012-12-07 00:00:00      0.0654\n3 2013-12-07 00:00:00      0.0214\n4 2015-12-07 00:00:00      0.0558\n5 2018-12-07 00:00:00      0.243 \n```\n:::\n\n```{.r .cell-code}\n# If you want to print only the YEAR values without correlation values\n# print(positive_corr_year$YEAR)\n```\n:::\n\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Table 6: Experience\n\n-   We assume that if an analyst is monitoring a company for a long period of time, he/she is expected to make more informed predictions. Create a new column in NFLX3 called **experience** that counts the cumulative number of years the analyst monitor (have predictions) the company. Print the summary of experience column.\n\n-   **Hint:** Try to use cumsum() function in R.\n\n-   **Need Written Response in this callout:** Which analyst (s) has the highest number of **experience** in **NFLX3** dataset and for how long do they monitor the NFLX ticker?\n\n::: {.callout-important appearance=\"simple\"}\n**Based on the analaysis conducted on the NFLX3 data there were two analysts of unique identifier 72088 and 77748 with the highest experience who observed the NTFLX ticker for 17 years each.**\n:::\n:::\n\n## Your code for Task 6\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter your code for Task 6 below \n# Calculate cumulative experience\nNFLX3 <- NFLX3 %>%\n  group_by(ANALYS) %>%\n  mutate(experience = cumsum(!duplicated(YEAR)))\n\n# Find max experience analysts\nmax_experience <- NFLX3 %>%\n  group_by(ANALYS) %>%\n  summarise(experience = max(experience)) %>%\n  filter(experience == max(experience))\n\n# Summary of experience column\nsummary(NFLX3$experience)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   3.000   4.192   6.000  17.000 \n```\n:::\n\n```{.r .cell-code}\n# Analyst(s) with highest experience\nmax_experience\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  ANALYS experience\n   <int>      <int>\n1  72088         17\n2  77748         17\n```\n:::\n:::\n\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 7: Size\n\n-   If a brokerage house has multiple analysts providing predictions for the same company, it may indicate a greater allocation of resources for company analysis. To capture this, create a new column in the `NFLX3` dataset called `size` that calculates the total count of **unique** analysts employed **per year** by **each** brokerage house (ESTIMATOR)\n\n-   **Need Written Response in this callout:** Print the frequencies for **size** variable. What does this frequency table reveal about the distribution of the number of analysts hired by brokerage houses in this dataset?\n\n    ::: {.callout-important appearance=\"simple\"}\n    **The data analysis indicates a notable decline in hiring frequency with an increase in the number of analyst. This trend suggests a strong inclination towards employing a single analyst per season within a brokerage.**\n    :::\n:::\n\n## Your code for Task\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter your code for Task 7 below \n# Count unique analysts per year and brokerage house (ESTIMATOR)\nNFLX3 <- NFLX3 %>%\n  group_by(YEAR, ESTIMATOR) %>%\n  mutate(size = n_distinct(ANALYS))\n\n# Print the frequencies for the size variable\nsize_freq <- table(NFLX3$size)\nprint(size_freq)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  1   2   3 \n560  72   9 \n```\n:::\n\n```{.r .cell-code}\n# Create a frequency table for better visualization\nsize_table <- as.data.frame(size_freq)\ncolnames(size_table) <- c(\"Number of Analysts\", \"Frequency\")\n\n# Sort the table by frequency in descending order\nsize_table <- size_table[order(-size_table$Frequency), ]\n\n# Print the sorted frequency table\nprint(size_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Number of Analysts Frequency\n1                  1       560\n2                  2        72\n3                  3         9\n```\n:::\n\n```{.r .cell-code}\n# Summary statistics for size variable\nsummary(NFLX3$size)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    1.00    1.00    1.14    1.00    3.00 \n```\n:::\n\n```{.r .cell-code}\n# Assuming you want a colorful plot, using a different color palette\nggplot(size_table, aes(x = factor(`Number of Analysts`), y = Frequency, fill = factor(`Number of Analysts`))) +\n  geom_bar(stat = \"identity\") +\n  ggtitle(\"Number of Unique Analysts per Year and ESTIMATOR\") +\n  xlab(\"Number of Analysts\") +\n  ylab(\"Frequency\") +\n  scale_fill_brewer(palette = \"Set3\")  \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 8: Prediction 1\n\n-   In the year 2020, NETFLIX reported an actual earnings per share (EPS) of \\$6.08. To predict this EPS value based on historical data, we will employ a linear regression model using the dataset `NFLX3` up until the year 2019. In this model, the target variable will be `ACTUAL` and the predictor variables will include `VALUE` and `past_accuracy`. C.all your model as `model1.`\n\n-   **Need Written Response in this callout:** Using the linear regression model 'model1,' which has been trained on historical data up to the year 2019, what is the forecasted EPS (Earnings Per Share) for the year 2020? Please provide a brief explanation of the method you employed to make this prediction. If you encountered any challenges or were unable to make the calculation, briefly describe the specific issues you encountered.\n\n::: {.callout-important appearance=\"simple\"}\n**The forecasting process involved using 'model1,' trained on historical data until 2019, to predict the Earnings Per Share (EPS) for 2020. To assess the model's accuracy, we calculated the R-squared value, a measure of how well the model fits the data. If the R-squared value was above 0.5, indicating a good fit, we proceeded with the forecast. In such cases, we computed the mean of the 'past_accuracy' variable and created a new data frame with specific values for 'VALUE' and 'past_accuracy.' Using the 'predict' function, we estimated the EPS for the future period. However, if the R-squared value was below 0.5, indicating a poor fit, a warning message was issued. This signaled that the model might not reliably predict future EPS values. It was crucial to address any data configuration or model training issues to improve prediction accuracy and ensure the reliability of the forecasting method.**\n:::\n:::\n\n## Your code for Task 8\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate mean of past_accuracy\nmean_pa <- mean(NFLX3$past_accuracy, na.rm = TRUE)\n\n\n# Create linear regression model\nmodel <- lm(ACTUAL ~ VALUE + past_accuracy, data = NFLX3)\n\n# Get R-squared value\nr_squared <- summary(model)$r.squared\n\n# Check R-squared for forecast\nif (r_squared > 0.5) {\n  # Future data\n  new_data <- data.frame(VALUE = 6.08, past_accuracy = mean_pa)\n  \n  # Predict EPS for future\n  pred_eps <- predict(model, newdata = new_data)\n  \n  # Print forecasted EPS\n  cat(\"Forecasted EPS for future period: $\", round(pred_eps, 2))\n} else {\n  # Print warning for low R-squared\n  cat(\"R-squared is low; model may not predict accurately.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nForecasted EPS for future period: $ 6.3\n```\n:::\n\n```{.r .cell-code}\n# Print mean past_accuracy\ncat(\"Mean past_accuracy: \", round(mean_pa, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean past_accuracy:  -0.09\n```\n:::\n:::\n\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 9: Prediction 2\n\n-   As an alternative approach, instead of modeling the 'ACTUAL' value, we can obtain the mean and median forecasts for the year 2020 as our best estimates of the EPS value for that year.\n\n-   **Need Written Response in this callout:** Please calculate these forecasts and then compare them with the results from the previous task. Finally, provide your insights and comments based on your findings.\n\n::: {.callout-important appearance=\"simple\"}\n**In the alternative approach for predicting Earnings Per Share (EPS) in 2020, mean and median forecasts were used, yielding values of approximately \\$1.24 and \\$0.41, respectively. While the mean and median forecasts provide straightforward averages and midpoints, the model-based forecast from the earlier linear regression model offers a more detailed and potentially precise prediction by considering historical relationships and variables like 'past_accuracy.' The reliability of the model-based forecast depends on the quality of its fit, indicated by the R-squared value. Despite their simplicity, mean and median forecasts lack the predictive power of a well-fitted model and might miss data nuances. The choice between these methods should consider data quality and specific analysis context. The model-driven forecast, although complex, offers a sophisticated approach, while mean and median forecasts are valuable alternatives,** **especially in uncertain model fits or when simpler predictions suffice. Consideration of factors such as context, data quality, and desired precision guides the selection of the appropriate forecasting method.**\n:::\n:::\n\n## Your code for Task 9\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate mean and median forecasts\nmean_forecast <- mean(NFLX3$VALUE, na.rm = TRUE)\nmedian_forecast <- median(NFLX3$VALUE, na.rm = TRUE)\n\n# Print mean and median forecasts\ncat(\"Mean forecast 2020: $\", round(mean_forecast, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean forecast 2020: $ 1.24\n```\n:::\n\n```{.r .cell-code}\ncat(\"Median forecast 2020: $\", round(median_forecast, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMedian forecast 2020: $ 0.41\n```\n:::\n:::\n\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 10: Averages\n\n-   Generate a new dataset named `NFLX4` by aggregating data from `NFLX3` Include the variables `size`, `experience`, `horizon`, `accuracy,` `past_accuracy`, and `ACTUAL` in `NFLX4`. When calculating the yearly averages for these variables, ignore any missing values (NAs). Present a summary of the `NFLX4` dataset.\n\n-   **Need Written Response in this callout:** Subsequently, employ correlation analysis or exploratory data analysis to get insights into the relationships between these variables and 'ACTUAL,' if such relationships exist.\n\n::: {.callout-important appearance=\"simple\"}\n**Actual EPS exhibits a positive correlation with analyst experience, indicating more accurate predictions with longer monitoring periods. Conversely, negative correlations with horizon, accuracy, and past accuracy imply reduced accuracy with longer forecast horizons and lower past accuracy. Multiple analysts in brokerage houses show varied impacts on predictions, underscoring the importance of resource allocation for comprehensive analysis.**\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate data and calculate yearly averages\nNFLX4 <- NFLX3 %>%\n  group_by(YEAR) %>%\n  summarise(\n    size = mean(size, na.rm = TRUE),\n    experience = mean(experience, na.rm = TRUE),\n    horizon = mean(horizon, na.rm = TRUE),\n    accuracy = mean(accuracy, na.rm = TRUE),\n    past_accuracy = mean(past_accuracy, na.rm = TRUE),\n    ACTUAL = mean(ACTUAL, na.rm = TRUE)\n  )\n\n# Summary of NFLX4 dataset\nsummary(NFLX4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     YEAR                size         experience       horizon       \n Length:19          Min.   :1.000   Min.   :1.000   Min.   :0.06284  \n Class :character   1st Qu.:1.074   1st Qu.:2.664   1st Qu.:0.08547  \n Mode  :character   Median :1.105   Median :3.400   Median :0.09289  \n                    Mean   :1.132   Mean   :3.611   Mean   :0.09004  \n                    3rd Qu.:1.202   3rd Qu.:4.869   3rd Qu.:0.09512  \n                    Max.   :1.300   Max.   :6.061   Max.   :0.10656  \n                                                                     \n    accuracy         past_accuracy           ACTUAL       \n Min.   :-0.822085   Min.   :-0.798219   Min.   :-0.0050  \n 1st Qu.:-0.019087   1st Qu.:-0.028736   1st Qu.: 0.0914  \n Median :-0.015035   Median :-0.013423   Median : 0.2643  \n Mean   :-0.048310   Mean   :-0.060652   Mean   : 0.9248  \n 3rd Qu.:-0.005415   3rd Qu.:-0.009260   3rd Qu.: 0.5678  \n Max.   : 0.121449   Max.   :-0.001547   Max.   : 6.0800  \n                     NA's   :1                            \n```\n:::\n\n```{.r .cell-code}\n# Correlation analysis\ncorrelation_matrix <- cor(NFLX4[, c(\"size\", \"experience\", \"horizon\", \"accuracy\", \"past_accuracy\", \"ACTUAL\")], use = \"complete.obs\")\n\n# Print correlation matrix\nprint(correlation_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     size  experience    horizon    accuracy past_accuracy\nsize           1.00000000  0.07451284 -0.1317823 -0.04537307    -0.1810330\nexperience     0.07451284  1.00000000 -0.4844637 -0.25882136    -0.4620906\nhorizon       -0.13178225 -0.48446371  1.0000000  0.22264895     0.4979377\naccuracy      -0.04537307 -0.25882136  0.2226489  1.00000000    -0.1604379\npast_accuracy -0.18103301 -0.46209061  0.4979377 -0.16043792     1.0000000\nACTUAL         0.18223220  0.68707354 -0.6346966 -0.31928984    -0.7958850\n                  ACTUAL\nsize           0.1822322\nexperience     0.6870735\nhorizon       -0.6346966\naccuracy      -0.3192898\npast_accuracy -0.7958850\nACTUAL         1.0000000\n```\n:::\n\n```{.r .cell-code}\n# Create a correlogram\ncorrplot(correlation_matrix, method = \"color\", type = \"upper\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}